1.什么是 Kubernetes

	Kubernetes是一个自动化的容器编排平台，它负责应用的部署，应用的弹性以及应用的管理，这些都是基于容器的。
	下文将Kubernetes 简写成K8s。

2.Kubernetes 有如下几个核心的功能：
	2.1 服务的发现与负载均衡
	2.2 容器的“调度”，把一个容器放到一个集群的某一台机器上，K8s帮助我们去做存储的编排，让存储的声明周期与容器的生命周期能有一个连接。
	2.3 k8s 会对容器做自动化的恢复，如果在一个集群中，经常出现宿主机的问题，导致容器不可用，K8s会自动对不可用的容器进行恢复。
	2.4 k8S 会帮助我们去做应用的自动发布和回滚，以及与应用相关的配置密文的管理。
	2.5 批量执行Job类型任务
	2.6 支持水平的伸缩
	
3.核心讲解
	3.1调度
	K8s 可以将用户提交的容器放到管理的集群中的某一台节点上去。“调度”是执行这项功能的组件，同时它会观察正在被调度的容器的大小，规格。
	
	
	3.2 自动修复
	K8s有一个节点健康检查的功能，它会检测集群中的所有宿主机，当宿主机本身出现故障时，或者某个软件出现故障时，这个节点健康检查会自动对它进行发现
	
	
	
	3.3 水平伸缩
	K8s 有业务负载检查的能力，它会监测业务上所承担的负载，如果这个业务本身的CPU利用率过高，或者响应时间过长，它可以对这个业务进行一次扩容。
	
4.K8s的架构
	K8s 架构是一个比较典型的二层架构和 Server-client 架构。Master 作为中央的管控节点，会去与Node 进行一个连接。所有UI的，Clients,这些User侧的组件，只会和Master进行连接，把希望的状态或者想执行的命令下发给Master,
	Master 会把这些命令或状态下发给相应的节点，进行最终执行。
	
	
	
	K8s的Master包含四个主要的组件：API Server, Controller, Scheduler以及etcd.
	
	

	API Server：顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送；
	
	Controller：是控制器，它用来完成对集群状态的一些管理。比如刚刚我们提到的两个例子之中，第一个自动对容器进行修复、第二个自动进行水平扩张，都是由 Kubernetes 中的 Controller 来进行完成的；
	
	Scheduler：是调度器，“调度器”顾名思义就是完成调度的操作，就是我们刚才介绍的第一个例子中，把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置；
	
	etcd：是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。
	
	API Server本身在部署结构上是一个可以水平扩展的一个部署组件；
	Controller 是一个可以进行热备的部署组件，它只有一个Active,它的调度器也是相应的，虽然只有一个Active，但是是可以进行热备。
	
	（PS:双机热备：是应用服务器的一种解决方案，其构造思想是主机和从机通过TCP/IP 网络连接，正常情况下主机处于工作状态，从机处于监视状态，一旦从机发现主机异常，从机将会以很短的时间之内代替主机，完全实现主机的功能）
	
K8s 的架构：Node
Node 是运行业务负载的，每个业务负载会以 Pod 的形式运行。一个 Pod 中运行一个或者多个容器，真正去运行这些Pod 的组件的是 kubelet ，它是 Node 上最关键的组件，它通过 API Server 接受到所需 Pod 运行的状态，然后提交到 Container Runtime 组件中。

在 OS 上去创建容器所需要运行的环境，最终把容器或者 Pod 运行起来，也需要对存储跟网络进行管理。Kubernetes 并不会直接进行网络存储的操作，他们会靠 Storage Plugin 或者是网络的 Plugin 来进行操作。用户自己或者云厂商都会去写相应的 Storage Plugin 或者 Network Plugin，去完成存储操作或网络操作。




	
	
	
	




